package globalquake.core.geo.taup;

import java.util.ArrayList;

@SuppressWarnings("unused")
public class TravelTimeTableOld {

	public static final double[] DEPTHS = { 0, 15, 35, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650,
			700 };
	public static final double[] DEPTHS_PKP = { 0, 35, 50, 100, 200, 300, 500, 700 };

	private static final int PKP_START = 113;

	public static final ArrayList<double[]> PTravelTimeTable = new ArrayList<>();
	public static final ArrayList<double[]> STravelTimeTable = new ArrayList<>();
	public static final ArrayList<double[]> PKPTravelTimeTable = new ArrayList<>();

	static {
		fillTable();
	}

	private static void fillTable() {
		PTravelTimeTable.add(new double[] { 0.0, 2.59, 5.76, 7.62, 13.84, 20.03, 26.12, 32.11, 37.97, 43.7, 49.32,
				54.67, 59.89, 65.02, 70.07, 75.02, 79.7 });
		PTravelTimeTable.add(new double[] { 19.17, 19.01, 17.51, 17.7, 20.39, 24.73, 29.72, 34.99, 40.34, 45.71, 51.05,
				56.18, 61.23, 66.21, 71.14, 76.0, 80.58 });
		PTravelTimeTable.add(new double[] { 35.03, 33.23, 31.27, 31.32, 32.54, 35.08, 38.47, 42.42, 46.73, 51.26, 55.91,
				60.47, 65.03, 69.62, 74.22, 78.78999999999999, 83.13 });
		PTravelTimeTable.add(new double[] { 48.78, 46.98, 45.02, 45.02, 45.71, 47.32, 49.59, 52.43, 55.71, 59.31, 63.16,
				66.97, 70.91, 74.95, 79.07, 83.24, 87.18 });
		PTravelTimeTable.add(new double[] { 62.53, 60.73, 58.77, 58.74, 59.14, 60.2, 61.73, 63.75, 66.17, 68.95, 72.02,
				75.09, 78.35, 81.78999999999999, 85.37, 89.06, 92.55 });
		PTravelTimeTable.add(new double[] { 76.27, 74.47, 72.51, 72.45, 72.67, 73.36, 74.35, 75.74, 77.48, 79.56, 81.95,
				84.31, 86.91, 89.76, 92.78999999999999, 95.97999999999999, 98.97 });
		PTravelTimeTable.add(new double[] { 90.01, 88.21000000000001, 86.25, 86.17, 86.24, 86.64, 87.2, 88.08, 89.26,
				90.76, 92.56, 94.25, 96.25, 98.53999999999999, 101.05, 103.74000000000001, 106.22999999999999 });
		PTravelTimeTable.add(new double[] { 103.75, 101.94, 99.97999999999999, 99.88, 99.83, 99.97999999999999, 100.17,
				100.62, 101.32, 102.32, 103.61, 104.66, 106.12, 107.89, 109.92, 112.15, 114.12 });
		PTravelTimeTable.add(new double[] { 117.47, 115.67, 113.7, 113.58, 113.42, 113.33, 113.18, 113.24000000000001,
				113.52000000000001, 114.08, 114.92, 115.35, 116.33, 117.64, 119.22999999999999, 121.02, 122.49 });
		PTravelTimeTable.add(new double[] { 131.19, 129.38, 127.41, 127.27, 127.02, 126.66, 126.2, 125.89, 125.79,
				125.96, 126.4, 126.17, 126.74, 127.66, 128.84, 130.24, 131.18 });
		PTravelTimeTable.add(new double[] { 144.9, 143.09, 141.12, 140.96, 140.62, 139.93, 139.17000000000002, 138.51,
				138.07, 137.88, 137.52, 137.05, 137.28, 137.84, 138.66, 139.7, 140.09 });
		PTravelTimeTable.add(new double[] { 158.59, 156.78, 154.81, 154.63, 154.21, 153.12, 152.05, 151.06, 150.3,
				149.8, 148.59, 147.93, 147.87, 148.12, 148.61, 149.32999999999998, 149.11 });
		PTravelTimeTable.add(new double[] { 172.27, 170.46, 168.48, 168.29, 167.59, 166.19, 164.8, 163.51, 162.47,
				161.55, 159.62, 158.79, 158.47, 158.44, 158.64, 158.56, 158.17000000000002 });
		PTravelTimeTable.add(new double[] { 185.94, 184.13, 182.14, 181.93, 180.8, 179.1, 177.41, 175.85, 174.55, 172.6,
				170.61, 169.61, 169.06, 168.77, 168.71, 167.78, 167.26 });
		PTravelTimeTable.add(new double[] { 199.59, 197.78, 195.79, 195.56, 193.83, 191.81, 189.85, 188.06, 185.98,
				183.6, 181.54, 180.37, 179.61, 179.09, 178.78, 176.97, 176.34 });
		PTravelTimeTable.add(new double[] { 213.23, 211.41, 209.32, 208.75, 206.63, 204.32, 202.13, 199.74, 196.99,
				194.54, 192.39, 191.06, 190.11, 189.37, 188.06, 186.15, 185.4 });
		PTravelTimeTable
				.add(new double[] { 226.37, 224.46, 222.31, 221.62, 219.17000000000002, 216.64, 213.82999999999998,
						210.73, 207.93, 205.41, 203.17000000000002, 201.68, 200.53, 199.44, 197.24, 195.29, 194.44 });
		PTravelTimeTable.add(new double[] { 239.13, 237.17000000000002, 234.96, 234.17000000000002, 231.49, 228.19,
				224.81, 221.67000000000002, 218.79, 216.19, 213.85, 212.21, 210.88, 208.62, 206.39, 204.41, 203.45 });
		PTravelTimeTable.add(new double[] { 251.57, 249.59, 247.33, 246.46, 242.77, 239.15, 235.72, 232.52, 229.57,
				226.88, 224.43, 222.63, 220.26, 217.77, 215.51, 213.48, 212.42000000000002 });
		PTravelTimeTable.add(new double[] { 263.16, 261.04, 258.57, 257.44, 253.71, 250.04, 246.55, 243.28, 240.24,
				237.45, 234.9, 232.15, 229.41, 226.89, 224.59, 222.52, 221.35 });
		PTravelTimeTable.add(new double[] { 274.1, 271.97, 269.49, 268.35, 264.56, 260.83, 257.28, 253.93, 250.81,
				247.86, 244.33, 241.29, 238.53, 235.97, 233.63, 231.5, 230.23 });
		PTravelTimeTable.add(new double[] { 284.95, 282.82, 280.32, 279.15999999999997, 275.32, 271.52, 267.89, 264.46,
				260.76, 257.01, 253.47, 250.4, 247.6, 245.01, 242.62, 240.43, 239.09 });
		PTravelTimeTable.add(new double[] { 295.71, 293.56, 291.05, 289.87, 285.96, 282.09000000000003,
				278.09000000000003, 273.89, 269.9, 266.12, 262.56, 259.46, 256.63, 253.99, 251.54, 249.31, 247.93 });
		PTravelTimeTable.add(new double[] { 306.34, 304.18, 301.65, 300.46, 296.18, 291.62, 287.22, 283.0, 279.0, 275.2,
				271.61, 268.48, 265.6, 262.91, 260.43, 258.16, 256.73 });
		PTravelTimeTable.add(new double[] { 316.31, 314.04, 311.33, 309.94, 305.31, 300.74, 296.32, 292.08, 288.05,
				284.23, 280.61, 277.43, 274.51, 271.79, 269.28, 266.99, 265.51 });
		PTravelTimeTable.add(new double[] { 325.43, 323.15, 320.44, 319.04, 314.4, 309.81, 305.37, 301.11, 297.05,
				293.2, 289.53, 286.33, 283.38, 280.64, 278.1, 275.78, 274.25 });
		PTravelTimeTable.add(new double[] { 334.5, 332.23, 329.51, 328.11, 323.45, 318.83, 314.37, 310.08, 305.99,
				302.1, 298.42, 295.19, 292.22, 289.45, 286.89, 284.54, 282.94 });
		PTravelTimeTable.add(new double[] { 343.54, 341.25, 338.53, 337.12, 332.44, 327.79, 323.3, 318.99, 314.88,
				310.97, 307.27, 304.02, 301.03, 298.24, 295.65, 293.25, 291.58 });
		PTravelTimeTable.add(new double[] { 352.5, 350.22, 347.49, 346.07, 341.35, 336.69, 332.19, 327.85, 323.73,
				319.81, 316.09, 312.82, 309.81, 306.99, 304.36, 301.91, 300.17 });
		PTravelTimeTable.add(new double[] { 361.41, 359.12, 356.38, 354.96, 350.23, 345.56, 341.04, 336.69, 332.55,
				328.62, 324.88, 321.59, 318.55, 315.69, 313.01, 310.52, 308.71 });
		PTravelTimeTable.add(new double[] { 370.27, 367.98, 365.24, 363.82, 359.08, 354.39, 349.86, 345.5,
				341.34000000000003, 337.39, 333.63, 330.31, 327.23, 324.33, 321.61, 319.07, 317.2 });
		PTravelTimeTable.add(new double[] { 379.11, 376.81, 374.07, 372.64, 367.89, 363.19, 358.64, 354.27,
				350.09000000000003, 346.11, 342.33, 338.97, 335.85, 332.90999999999997, 330.15, 327.57, 325.63 });
		PTravelTimeTable.add(new double[] { 387.91, 385.62, 382.87, 381.44, 376.67, 371.96, 367.39, 362.99, 358.79,
				354.78, 350.97, 347.58, 344.42, 341.44, 338.64, 336.01, 334.01 });
		PTravelTimeTable.add(new double[] { 396.68, 394.38, 391.63, 390.19, 385.41, 380.67, 376.08, 371.66, 367.43,
				363.4, 359.55, 356.13, 352.93, 349.90999999999997, 347.06, 344.39, 342.32 });
		PTravelTimeTable.add(new double[] { 405.4, 403.09000000000003, 400.34000000000003, 398.89, 394.09000000000003,
				389.33, 384.71, 380.27, 376.01, 371.95, 368.07, 364.61, 361.38, 358.32, 355.43, 352.71, 350.58 });
		PTravelTimeTable.add(new double[] { 414.06, 411.75, 408.99, 407.54, 402.71, 397.93, 393.29, 388.82, 384.53,
				380.44, 376.54, 373.04, 369.77, 366.67, 363.73, 360.96, 358.78 });
		PTravelTimeTable.add(new double[] { 422.66, 420.34, 417.58, 416.12, 411.27, 406.46, 401.8, 397.3, 392.99,
				388.87, 384.94, 381.41, 378.1, 374.96, 371.98, 369.16, 366.92 });
		PTravelTimeTable.add(new double[] { 431.19, 428.88, 426.1, 424.64, 419.76, 414.94, 410.25, 405.73, 401.39,
				397.24, 393.27, 389.71, 386.36, 383.18, 380.16, 377.3, 375.0 });
		PTravelTimeTable.add(new double[] { 439.67, 437.35, 434.57, 433.09, 428.2, 423.35, 418.64, 414.09000000000003,
				409.72, 405.54, 401.54, 397.94, 394.56, 391.34, 388.27, 385.37, 383.02 });
		PTravelTimeTable.add(new double[] { 448.08, 445.75, 442.97, 441.49, 436.57, 431.69, 426.96, 422.38, 417.99,
				413.78, 409.75, 406.11, 402.69, 399.43, 396.33, 393.38, 390.97 });
		PTravelTimeTable.add(new double[] { 456.42, 454.09000000000003, 451.3, 449.81, 444.87, 439.97, 435.21, 430.6,
				426.19, 421.95, 417.88, 414.22, 410.76, 407.46, 404.31, 401.32, 398.86 });
		PTravelTimeTable.add(new double[] { 464.7, 462.36, 459.56, 458.07, 453.1, 448.18, 443.39, 438.76, 434.32,
				430.05, 425.96, 422.25, 418.76, 415.42, 412.23, 409.2, 406.69 });
		PTravelTimeTable.add(new double[] { 472.9, 470.56, 467.76, 466.26, 461.27, 456.32, 451.51, 446.85, 442.38,
				438.08, 433.96, 430.22, 426.69, 423.32, 420.09, 417.01, 414.45 });
		PTravelTimeTable.add(new double[] { 481.04, 478.7, 475.88, 474.38, 469.36, 464.39, 459.56, 454.87, 450.37,
				446.05, 441.89, 438.12, 434.56, 431.14, 427.88, 424.76, 422.14 });
		PTravelTimeTable.add(new double[] { 489.11, 486.76, 483.94, 482.43, 477.39, 472.39, 467.53, 462.83, 458.3,
				453.94, 449.76, 445.96, 442.36, 438.9, 435.6, 432.44, 429.77 });
		PTravelTimeTable.add(new double[] { 497.1, 494.75, 491.93, 490.4, 485.34, 480.32, 475.44, 470.71, 466.15,
				461.77, 457.55, 453.72, 450.08, 446.59, 443.25, 440.05, 437.34 });
		PTravelTimeTable.add(new double[] { 505.03, 502.67, 499.84, 498.31, 493.23, 488.18, 483.27, 478.52, 473.93,
				469.52, 465.28, 461.40999999999997, 457.74, 454.22, 450.84, 447.6, 444.84 });
		PTravelTimeTable.add(new double[] { 512.88, 510.52, 507.68, 506.14, 501.04, 495.97, 491.04, 486.26, 481.65,
				477.21, 472.94, 469.04, 465.33, 461.77, 458.35, 455.08, 452.27 });
		PTravelTimeTable.add(new double[] { 520.66, 518.29, 515.45, 513.91, 508.78, 503.69, 498.73, 493.92, 489.29,
				484.82, 480.52, 476.59000000000003, 472.85, 469.26, 465.8, 462.49, 459.65 });
		PTravelTimeTable.add(new double[] { 528.37, 526.0, 523.15, 521.6, 516.44, 511.33, 506.35, 501.52, 496.86,
				492.37, 488.04, 484.08, 480.31, 476.68, 473.19, 469.84000000000003, 466.95 });
		PTravelTimeTable.add(new double[] { 536.0, 533.63, 530.77, 529.21, 524.04, 518.91, 513.9, 509.04, 504.36,
				499.84, 495.48, 491.49, 487.69, 484.03, 480.51, 477.12, 474.19 });
		PTravelTimeTable.add(new double[] { 543.56, 541.18, 538.32, 536.76, 531.56, 526.41, 521.38, 516.5, 511.79,
				507.24, 502.86, 498.84, 495.01, 491.31, 487.76, 484.33, 481.36 });
		PTravelTimeTable.add(new double[] { 551.05, 548.67, 545.8, 544.23, 539.01, 533.83, 528.78, 523.88, 519.15,
				514.58, 510.17, 506.12, 502.25, 498.53, 494.93, 491.47, 488.46 });
		PTravelTimeTable.add(new double[] { 558.47, 556.08, 553.2, 551.63, 546.39, 541.19, 536.12, 531.19, 526.44,
				521.84, 517.41, 513.32, 509.43, 505.67, 502.05, 498.55, 495.5 });
		PTravelTimeTable.add(new double[] { 565.81, 563.42, 560.54, 558.96, 553.7, 548.48, 543.38, 538.43, 533.65,
				529.03, 524.57, 520.46, 516.54, 512.75, 509.09, 505.56, 502.47 });
		PTravelTimeTable.add(new double[] { 573.08, 570.69, 567.8, 566.21, 560.93, 555.69, 550.58, 545.6, 540.8, 536.15,
				531.66, 527.53, 523.57, 519.75, 516.06, 512.5, 509.37 });
		PTravelTimeTable.add(new double[] { 580.28, 577.88, 574.99, 573.39, 568.09, 562.83, 557.69, 552.7, 547.87,
				543.2, 538.69, 534.52, 530.54, 526.69, 522.97, 519.37, 516.21 });
		PTravelTimeTable.add(new double[] { 587.4, 585.0, 582.1, 580.5, 575.18, 569.9, 564.74, 559.72, 554.87, 550.18,
				545.64, 541.45, 537.44, 533.56, 529.81, 526.18, 522.98 });
		PTravelTimeTable.add(new double[] { 594.46, 592.05, 589.14, 587.54, 582.2, 576.9, 571.72, 566.68, 561.8, 557.09,
				552.53, 548.31, 544.27, 540.36, 536.57, 532.92, 529.68 });
		PTravelTimeTable.add(new double[] { 601.43, 599.02, 596.11, 594.5, 589.14, 583.82, 578.62, 573.56, 568.66,
				563.92, 559.34, 555.09, 551.02, 547.09, 543.27, 539.59, 536.31 });
		PTravelTimeTable.add(new double[] { 608.34, 605.93, 603.01, 601.39, 596.01, 590.67, 585.45, 580.37, 575.45,
				570.69, 566.08, 561.81, 557.71, 553.75, 549.91, 546.19, 542.88 });
		PTravelTimeTable.add(new double[] { 615.17, 612.75, 609.83, 608.21, 602.81, 597.45, 592.21, 587.11, 582.17,
				577.38, 572.75, 568.45, 564.33, 560.34, 556.47, 552.72, 549.38 });
		PTravelTimeTable.add(new double[] { 621.93, 619.51, 616.58, 614.95, 609.54, 604.16, 598.9, 593.77, 588.81,
				584.01, 579.35, 575.03, 570.88, 566.86, 562.97, 559.19, 555.82 });
		PTravelTimeTable.add(new double[] { 628.62, 626.19, 623.26, 621.63, 616.19, 610.79, 605.51, 600.37, 595.39,
				590.56, 585.88, 581.54, 577.37, 573.32, 569.4, 565.59, 562.18 });
		PTravelTimeTable.add(new double[] { 635.23, 632.8, 629.86, 628.23, 622.77, 617.36, 612.06, 606.9, 601.89,
				597.05, 592.35, 587.98, 583.78, 579.71, 575.76, 571.92, 568.48 });
		PTravelTimeTable.add(new double[] { 641.78, 639.34, 636.4, 634.76, 629.29, 623.85, 618.53, 613.35, 608.33,
				603.46, 598.74, 594.35, 590.12, 586.03, 582.05, 578.19, 574.72 });
		PTravelTimeTable.add(new double[] { 648.25, 645.81, 642.86, 641.21, 635.72, 630.27, 624.94, 619.74, 614.69,
				609.8, 605.06, 600.64, 596.4, 592.27, 588.27, 584.38, 580.88 });
		PTravelTimeTable.add(new double[] { 654.65, 652.21, 649.25, 647.6, 642.09, 636.62, 631.27, 626.05, 620.99,
				616.08, 611.31, 606.87, 602.6, 598.45, 594.42, 590.51, 586.98 });
		PTravelTimeTable.add(new double[] { 660.97, 658.53, 655.57, 653.91, 648.39, 642.9, 637.53, 632.29, 627.21,
				622.28, 617.49, 613.03, 608.74, 604.56, 600.51, 596.57, 593.01 });
		PTravelTimeTable.add(new double[] { 667.23, 664.78, 661.82, 660.15, 654.61, 649.11, 643.72, 638.46, 633.36,
				628.41, 623.6, 619.12, 614.8, 610.61, 606.52, 602.56, 598.97 });
		PTravelTimeTable.add(new double[] { 673.41, 670.96, 667.99, 666.32, 660.76, 655.24, 649.83, 644.56, 639.44,
				634.47, 629.65, 625.14, 620.8, 616.58, 612.47, 608.48, 604.86 });
		PTravelTimeTable.add(new double[] { 679.51, 677.06, 674.09, 672.41, 666.84, 661.3, 655.88, 650.59, 645.45,
				640.46, 635.61, 631.09, 626.72, 622.48, 618.35, 614.33, 610.68 });
		PTravelTimeTable.add(new double[] { 685.55, 683.09, 680.12, 678.44, 672.85, 667.29, 661.85, 656.54, 651.39,
				646.38, 641.51, 636.96, 632.58, 628.31, 624.15, 620.11, 616.43 });
		PTravelTimeTable.add(new double[] { 691.51, 689.05, 686.07, 684.39, 678.78, 673.21, 667.75, 662.43, 657.25,
				652.22, 647.34, 642.77, 638.36, 634.07, 629.89, 625.82, 622.12 });
		PTravelTimeTable.add(new double[] { 697.4, 694.94, 691.95, 690.26, 684.64, 679.05, 673.58, 668.24, 663.04,
				658.0, 653.09, 648.5, 644.07, 639.75, 635.55, 631.46, 627.73 });
		PTravelTimeTable.add(new double[] { 703.22, 700.75, 697.76, 696.06, 690.43, 684.82, 679.33, 673.97, 668.76,
				663.7, 658.77, 654.16, 649.71, 645.37, 641.15, 637.03, 633.28 });
		PTravelTimeTable.add(new double[] { 708.96, 706.49, 703.49, 701.79, 696.14, 690.52, 685.01, 679.64, 674.41,
				669.33, 664.38, 659.75, 655.28, 650.92, 646.67, 642.54, 638.76 });
		PTravelTimeTable.add(new double[] { 714.62, 712.15, 709.15, 707.45, 701.78, 696.14, 690.62, 685.23, 679.98,
				674.88, 669.92, 665.27, 660.78, 656.4, 652.13, 647.97, 644.17 });
		PTravelTimeTable.add(new double[] { 720.22, 717.74, 714.74, 713.03, 707.35, 701.7, 696.16, 690.75, 685.49,
				680.37, 675.39, 670.72, 666.21, 661.81, 657.52, 653.33, 649.5 });
		PTravelTimeTable.add(new double[] { 725.74, 723.26, 720.25, 718.54, 712.84, 707.18, 701.62, 696.2, 690.92,
				685.79, 680.79, 676.1, 671.57, 667.14, 662.83, 658.62, 654.77 });
		PTravelTimeTable.add(new double[] { 731.19, 728.71, 725.69, 723.98, 718.26, 712.58, 707.02, 701.57, 696.28,
				691.13, 686.11, 681.4, 676.85, 672.4, 668.07, 663.84, 659.96 });
		PTravelTimeTable.add(new double[] { 736.56, 734.07, 731.05, 729.34, 723.61, 717.91, 712.33, 706.87, 701.56,
				696.39, 691.36, 686.63, 682.06, 677.59, 673.24, 668.98, 665.08 });
		PTravelTimeTable.add(new double[] { 741.85, 739.37, 736.34, 734.62, 728.88, 723.17, 717.57, 712.1, 706.77,
				701.58, 696.53, 691.78, 687.19, 682.71, 678.33, 674.05, 670.12 });
		PTravelTimeTable.add(new double[] { 747.07, 744.58, 741.56, 739.83, 734.07, 728.35, 722.73, 717.25, 711.9,
				706.7, 701.63, 696.86, 692.25, 687.74, 683.34, 679.05, 675.1 });
		PTravelTimeTable.add(new double[] { 752.22, 749.72, 746.69, 744.96, 739.19, 733.45, 727.82, 722.32, 716.96,
				711.74, 706.65, 701.86, 697.23, 692.71, 688.29, 683.97, 680.0 });
		PTravelTimeTable.add(new double[] { 757.28, 754.78, 751.75, 750.01, 744.23, 738.47, 732.83, 727.31, 721.93,
				716.7, 711.6, 706.79, 702.14, 697.6, 693.16, 688.82, 684.81 });
		PTravelTimeTable.add(new double[] { 762.26, 759.77, 756.72, 754.98, 749.19, 743.42, 737.76, 732.23, 726.84,
				721.59, 716.47, 711.64, 706.97, 702.39, 697.92, 693.56, 689.53 });
		PTravelTimeTable.add(new double[] { 767.18, 764.68, 761.63, 759.89, 754.08, 748.29, 742.62, 737.06, 731.65,
				726.37, 721.23, 716.39, 711.69, 707.11, 702.63, 698.25, 694.22 });
		PTravelTimeTable.add(new double[] { 771.99, 769.49, 766.43, 764.68, 758.85, 753.05, 747.36, 741.79, 736.37,
				731.09, 725.93, 721.08, 716.38, 711.79, 707.3, 702.92, 698.88 });
		PTravelTimeTable.add(new double[] { 776.71, 774.21, 771.15, 769.4, 763.56, 757.76, 752.06, 746.48, 741.05,
				735.76, 730.61, 725.75, 721.04, 716.44, 711.95, 707.56, 703.51 });
		PTravelTimeTable.add(new double[] { 781.4, 778.89, 775.83, 774.08, 768.24, 762.43, 756.72, 751.15, 745.71,
				740.41, 735.25, 730.39, 725.68, 721.08, 716.58, 712.19, 708.13 });
		PTravelTimeTable.add(new double[] { 786.05, 783.55, 780.49, 778.73, 772.89, 767.07, 761.37, 755.78, 750.35,
				745.05, 739.88, 735.01, 730.3, 725.69, 721.19, 716.8, 712.74 });
		PTravelTimeTable.add(new double[] { 790.69, 788.18, 785.12, 783.37, 777.52, 771.7, 765.99, 760.4, 754.96,
				749.66, 744.49, 739.62, 734.9, 730.3, 725.79, 721.39, 717.33 });
		PTravelTimeTable.add(new double[] { 795.31, 792.8, 789.74, 787.98, 782.13, 776.31, 770.6, 765.01, 759.57,
				754.26, 749.09, 744.22, 739.49, 734.88, 730.37, 725.96, 721.89 });
		PTravelTimeTable.add(new double[] { 799.91, 797.4, 794.34, 792.58, 786.73, 780.91, 775.19, 769.6, 764.15,
				758.84, 753.67, 748.79, 744.06, 739.44, 734.93, 730.51, 726.44 });
		PTravelTimeTable.add(new double[] { 804.5, 801.99, 798.93, 797.17, 791.31, 785.48, 779.76, 774.17, 768.72,
				763.4, 758.22, 753.34, 748.6, 743.98, 739.46, 735.04, 730.95 });
		PTravelTimeTable.add(new double[] { 809.06, 806.55, 803.49, 801.73, 795.87, 790.04, 784.31, 778.71, 773.26,
				767.94, 762.75, 757.86, 753.12, 748.49, 743.96, 739.53, 735.44 });
		PTravelTimeTable.add(new double[] { 813.6, 811.09, 808.02, 806.26, 800.4, 794.56, 788.83, 783.23, 777.77,
				772.44, 767.25, 762.35, 757.61, 752.97, 748.43, 744.0, 739.9 });
		PTravelTimeTable.add(new double[] { 818.11, 815.6, 812.53, 810.77, 804.9, 799.06, 793.33, 787.72, 782.25,
				776.92, 771.72, 766.82, 762.07, 757.42, 752.88, 748.44, 744.34 });
		PTravelTimeTable.add(new double[] { 822.59, 820.08, 817.01, 815.25, 809.37, 803.53, 797.79, 792.17, 786.7,
				781.37, 776.17, 771.26, 766.51, 761.87, 757.33, 752.89, 748.79 });
		PTravelTimeTable.add(new double[] { 827.04, 824.53, 821.46, 819.7, 813.82, 807.97, 802.23, 796.62, 791.15,
				785.81, 780.61, 775.71, 770.96, 766.31, 761.77, 757.33, 753.23 });
		PTravelTimeTable.add(new double[] { 831.49, 828.97, 825.91, 824.14, 818.26, 812.42, 806.68, 801.07, 795.59,
				790.26, 785.06, 780.15, 775.4, 770.76, 766.22, 761.78, 757.68 });
		PTravelTimeTable.add(new double[] { 835.93, 833.42, 830.35, 828.59, 822.71, 816.86, 811.13, 805.51, 800.04,
				794.71, 789.51, 784.6, 779.85, 775.2, 770.66, 766.23, 762.13 });
		PTravelTimeTable.add(new double[] { 840.38, 837.86, 834.8, 833.03, 827.16, 821.31, 815.57, 809.96, 804.48,
				799.15, 793.95, 789.05, 784.29, 779.65, 775.11, 770.67, 766.57 });
		PTravelTimeTable.add(new double[] { 844.83, 842.31, 839.24, 837.48, 831.6, 825.76, 820.02, 814.4, 808.93, 803.6,
				798.4, 793.49, 788.74, 784.09, 779.55, 775.12, 771.02 });
		PTravelTimeTable.add(new double[] { 849.27, 846.76, 843.69, 841.92, 836.05, 830.2, 824.46, 818.85, 813.38,
				808.04, 802.84, 797.94, 793.18, 788.54, 784.0, 779.56, 775.46 });
		PTravelTimeTable.add(new double[] { 853.72, 851.2, 848.14, 846.37, 840.49, 834.65, 828.91, 823.29, 817.82,
				812.49, 807.29, 802.38, 797.63, 792.99, 788.45, 784.01, 779.91 });
		PTravelTimeTable.add(new double[] { 858.16, 855.65, 852.58, 850.82, 844.94, 839.09, 833.35, 827.74, 822.27,
				816.93, 811.73, 806.83, 802.08, 797.43, 792.89, 788.45, 784.35 });
		PTravelTimeTable.add(new double[] { 862.61, 860.09, 857.03, 855.26, 849.38, 843.54, 837.8, 832.18, 826.71,
				821.38, 816.18, 811.27, 806.52, 801.88, 797.34, 792.9, 788.8 });
		PTravelTimeTable.add(new double[] { 867.05, 864.54, 861.47, 859.71, 853.83, 847.98, 842.24, 836.63, 831.16,
				825.83, 820.63, 815.72, 810.97, 806.32, 801.78, 797.35, 793.25 });
		PTravelTimeTable.add(new double[] { 871.5, 868.98, 865.92, 864.15, 858.28, 852.43, 846.69, 841.08, 835.6,
				830.27, 825.07, 820.17, 815.41, 810.77, 806.23, 801.79, 797.69 });
		PTravelTimeTable.add(new double[] { 875.95, 873.43, 870.36, 868.6, 862.72, 856.87, 851.14, 845.52, 840.05,
				834.72, 829.52, 824.61, 819.86, 815.21, 810.67, 806.24, 802.14 });
		PTravelTimeTable.add(new double[] { 880.39, 877.88, 874.81, 873.04, 867.17, 861.32, 855.58, 849.97, 844.5,
				839.16, 833.96, 829.06, 824.3, 819.66, 815.12, 810.68, 806.58 });
		PTravelTimeTable.add(new double[] { 884.84, 882.32, 879.25, 877.49, 871.61, 865.77, 860.03, 854.41, 848.94,
				843.61, 838.41, 833.5, 828.75, 824.11, 819.57, 815.13, 811.03 });
		PTravelTimeTable.add(new double[] { 889.28, 886.77, 883.7, 881.94, 876.06, 870.21, 864.47, 858.86, 853.39,
				848.05, 842.85, 837.95, 833.2, 828.55, 824.01, 819.57, 815.47 });
		PTravelTimeTable.add(new double[] { 893.73, 891.21, 888.15, 886.38, 880.5, 874.66, 868.92, 863.3, 857.83, 852.5,
				847.3, 842.39, 837.64, 833.0, 828.46, 824.02, 819.92 });
		PTravelTimeTable.add(new double[] { 898.17, 895.66, 892.59, 890.83, 884.95, 879.1, 873.36, 867.75, 862.28,
				856.94, 851.75, 846.84, 842.09, 837.44, 832.9, 828.47, 824.36 });
		PTravelTimeTable.add(new double[] { 902.62, 900.1, 897.04, 895.27, 889.4, 883.55, 877.81, 872.2, 866.72, 861.39,
				856.19, 851.29, 846.53, 841.89, 837.35, 832.91, 828.81 });
		PTravelTimeTable.add(new double[] { 907.06, 904.55, 901.48, 899.72, 893.84, 887.99, 882.26, 876.64, 871.17,
				865.84, 860.64, 855.73, 850.98, 846.33, 841.79, 837.36, 833.26 });
		PTravelTimeTable.add(new double[] { 911.51, 908.99, 905.93, 904.16, 898.29, 892.44, 886.7, 881.09, 875.62,
				870.28, 865.08, 860.18, 855.42, 850.78, 846.24, 841.8, 837.7 });
		PTravelTimeTable.add(new double[] { 915.96, 913.44, 910.37, 908.61, 902.73, 896.89, 891.15, 885.53, 880.06,
				874.73, 869.53, 864.62, 859.87, 855.22, 850.68, 846.25, 842.15 });
		PTravelTimeTable.add(new double[] { 920.4, 917.89, 914.82, 913.05, 907.18, 901.33, 895.59, 889.98, 884.51,
				879.17, 873.97, 869.07, 864.32, 859.67, 855.13, 850.69, 846.59 });
		PTravelTimeTable.add(new double[] { 924.85, 922.33, 919.27, 917.5, 911.62, 905.78, 900.04, 894.42, 888.95,
				883.62, 878.42, 873.51, 868.76, 864.12, 859.58, 855.14, 851.04 });
		PTravelTimeTable.add(new double[] { 929.29, 926.78, 923.71, 921.95, 916.07, 910.22, 904.48, 898.87, 893.4,
				888.06, 882.86, 877.96, 873.21, 868.56, 864.02, 859.59, 855.48 });
		PTravelTimeTable.add(new double[] { 933.74, 931.22, 928.16, 926.39, 920.52, 914.67, 908.93, 903.32, 897.84,
				892.51, 887.31, 882.41, 877.65, 873.01, 868.47, 864.03, 859.93 });
		PTravelTimeTable.add(new double[] { 938.18, 935.67, 932.6, 930.84, 924.96, 919.11, 913.38, 907.76, 902.29,
				896.96, 891.76, 886.85, 882.1, 877.45, 872.91, 868.48, 864.38 });

		STravelTimeTable.add(new double[] { 0.0, 4.34, 9.68, 13.02, 24.16, 35.27, 46.35, 57.34, 68.13, 78.72, 89.12,
				98.99000000000001, 108.57, 117.96000000000001, 127.17, 136.2, 144.64 });
		STravelTimeTable.add(new double[] { 32.14, 31.98, 30.38, 30.74, 35.74, 43.61, 52.78, 62.52, 72.42, 82.37,
				92.27000000000001, 101.74000000000001, 111.0, 120.13, 129.12, 137.97, 146.25 });
		STravelTimeTable.add(new double[] { 60.75, 57.98, 55.06, 55.14, 57.38, 62.05, 68.43, 75.89, 83.96000000000001,
				92.41, 101.11, 109.53999999999999, 117.94, 126.35, 134.74, 143.07, 150.88 });
		STravelTimeTable.add(new double[] { 85.43, 82.66, 79.73, 79.72, 80.94, 83.92, 88.39, 93.95, 100.21000000000001,
				107.03, 114.28999999999999, 121.4, 128.65, 136.07999999999998, 143.6, 151.17000000000002, 158.28 });
		STravelTimeTable.add(new double[] { 110.1, 107.33, 104.4, 104.33, 104.99000000000001, 107.0, 110.24000000000001,
				114.4, 119.19, 124.57, 130.46, 136.21, 142.24, 148.56, 155.1, 161.8, 168.05 });
		STravelTimeTable.add(new double[] { 134.76, 131.99, 129.06, 128.93, 129.22, 130.59, 132.98, 136.12, 139.74,
				143.91, 148.59, 153.06, 157.89, 163.12, 168.65, 174.42000000000002, 179.76 });
		STravelTimeTable.add(new double[] { 159.41, 156.63, 153.7, 153.52, 153.53, 154.43, 156.2, 158.54, 161.21,
				164.36, 168.01, 171.27, 174.99, 179.18, 183.74, 188.6, 192.98 });
		STravelTimeTable.add(new double[] { 184.04, 181.26, 178.32, 178.1, 177.87, 178.4, 179.69, 181.38, 183.24,
				185.52, 188.26, 190.37, 193.06, 196.3, 199.96, 203.96, 207.36 });
		STravelTimeTable.add(new double[] { 208.65, 205.87, 202.92000000000002, 202.66, 202.21, 202.44, 203.34, 204.45,
				205.6, 207.12, 209.06, 210.0, 211.78, 214.16, 216.98, 220.17000000000002, 222.57999999999998 });
		STravelTimeTable.add(new double[] { 233.24, 230.45, 227.5, 227.19, 226.56, 226.52, 227.07999999999998,
				227.67000000000002, 228.15, 228.97, 230.2, 229.89, 230.9, 232.5, 234.56, 237.01, 238.37 });
		STravelTimeTable.add(new double[] { 257.8, 255.01, 252.05, 251.7, 250.88, 250.61, 250.89, 250.93, 250.79,
				250.97, 250.84, 249.89, 250.23, 251.14, 252.52, 254.28, 254.5 });
		STravelTimeTable.add(new double[] { 282.33, 279.53, 276.56, 276.17, 275.19, 274.71, 274.72, 274.15999999999997,
				273.43, 273.02, 271.23, 269.88, 269.65, 269.96, 270.71, 271.52, 270.78 });
		STravelTimeTable.add(new double[] { 306.83, 304.02, 301.04, 300.61, 299.47, 298.79, 298.57, 297.3, 295.99,
				295.05, 291.53, 289.82, 289.09000000000003, 288.84000000000003, 289.03, 288.19, 287.11 });
		STravelTimeTable.add(new double[] { 331.29, 328.47, 325.48, 325.01, 323.72, 322.86, 322.36, 320.27, 318.45,
				315.58, 311.72, 309.67, 308.47, 307.73, 307.39, 304.79, 303.4 });
		STravelTimeTable.add(new double[] { 355.7, 352.89, 349.88, 349.37, 347.93, 346.9, 345.65999999999997, 343.04,
				340.3, 335.79, 331.77, 329.38, 327.76, 326.56, 325.01, 321.32, 319.64 });
		STravelTimeTable.add(new double[] { 380.08, 377.25, 374.24, 373.69, 372.11, 370.91, 368.66, 365.58, 360.52,
				355.87, 351.65999999999997, 348.94, 346.90999999999997, 345.29, 341.55, 337.75, 335.81 });
		STravelTimeTable.add(new double[] { 404.40999999999997, 401.57, 398.55, 397.96, 396.25, 394.82, 391.36, 385.83,
				380.59, 375.77, 371.36, 368.31, 365.91, 362.32, 357.99, 354.06, 351.89 });
		STravelTimeTable.add(new double[] { 428.69, 425.85, 422.81, 422.18, 420.34, 417.65999999999997, 411.68, 405.87,
				400.48, 395.47, 390.84, 387.48, 383.6, 378.75, 374.3, 370.26, 367.81 });
		STravelTimeTable.add(new double[] { 452.92, 450.07, 447.02, 446.36, 444.01, 437.81, 431.68, 425.73, 420.15,
				414.95, 410.09000000000003, 405.33, 400.0, 395.05, 390.5, 386.32, 383.62 });
		STravelTimeTable.add(new double[] { 477.1, 474.24, 471.17, 470.47, 464.07, 457.75, 451.47, 445.35, 439.59,
				434.18, 427.64, 421.7, 416.28, 411.24, 406.56, 402.18, 399.4 });
		STravelTimeTable.add(new double[] { 499.77, 496.38, 492.44, 490.47, 483.94, 477.46, 471.02, 464.72, 458.06,
				450.85, 443.96, 437.94, 432.43, 427.26, 422.4, 417.98, 415.15 });
		STravelTimeTable.add(new double[] { 519.66, 516.24, 512.27, 510.25, 503.57, 496.92, 489.91, 481.99, 474.39,
				467.11, 460.15, 454.05, 448.39, 443.08, 438.19, 433.74, 430.88 });
		STravelTimeTable.add(new double[] { 539.3, 535.85, 531.83, 529.77, 522.56, 514.36, 506.22, 498.25, 490.59,
				483.24, 476.18, 469.93, 464.2, 458.87, 453.95, 449.48, 446.58 });
		STravelTimeTable.add(new double[] { 557.88, 554.15, 549.7, 547.19, 538.86, 530.6, 522.41, 514.37, 506.62,
				499.15, 492.0, 485.73, 479.97, 474.62, 469.69, 465.19, 462.24 });
		STravelTimeTable.add(new double[] { 574.14, 570.4, 565.93, 563.4, 555.02, 546.7, 538.41, 530.26, 522.44, 514.95,
				507.78, 501.49, 495.72, 490.35, 485.4, 480.88, 477.87 });
		STravelTimeTable.add(new double[] { 590.26, 586.5, 582.01, 579.46, 570.97, 562.56, 554.22, 546.06, 538.22,
				530.71, 523.54, 517.23, 511.44, 506.05, 501.08, 496.52, 493.44 });
		STravelTimeTable.add(new double[] { 606.14, 602.37, 597.85, 595.29, 586.78, 578.35, 570.0, 561.82, 553.97,
				546.46, 539.27, 532.94, 527.13, 521.72, 516.71, 512.11, 508.96 });
		STravelTimeTable.add(new double[] { 621.93, 618.16, 613.64, 611.07, 602.55, 594.11, 585.75, 577.56, 569.7,
				562.17, 554.97, 548.62, 542.79, 537.35, 532.29, 527.64, 524.41 });
		STravelTimeTable.add(new double[] { 637.69, 633.92, 629.4, 626.82, 618.29, 609.84, 601.47, 593.27, 585.4,
				577.85, 570.63, 564.26, 558.4, 552.91, 547.81, 543.11, 539.79 });
		STravelTimeTable.add(new double[] { 653.43, 649.65, 645.13, 642.55, 634.01, 625.55, 617.17, 608.95, 601.06,
				593.5, 586.25, 579.85, 573.95, 568.42, 563.27, 558.5, 555.1 });
		STravelTimeTable.add(new double[] { 669.14, 665.36, 660.83, 658.25, 649.7, 641.22, 632.82, 624.59, 616.68,
				609.09, 601.81, 595.37, 589.43, 583.85, 578.65, 573.82, 570.33 });
		STravelTimeTable.add(new double[] { 684.81, 681.03, 676.5, 673.91, 665.34, 656.85, 648.43, 640.18, 632.24,
				624.61, 617.3, 610.83, 604.84, 599.21, 593.95, 589.07, 585.49 });
		STravelTimeTable.add(new double[] { 700.45, 696.66, 692.12, 689.53, 680.94, 672.42, 663.98, 655.7, 647.73,
				640.07, 632.72, 626.21, 620.17, 614.5, 609.18, 604.24, 600.58 });
		STravelTimeTable.add(new double[] { 716.02, 712.23, 707.69, 705.09, 696.47, 687.93, 679.46, 671.14, 663.14,
				655.45, 648.07, 641.51, 635.43, 629.7, 624.33, 619.33, 615.58 });
		STravelTimeTable.add(new double[] { 731.53, 727.73, 723.18, 720.58, 711.93, 703.36, 694.86, 686.52, 678.48,
				670.76, 663.34, 656.73, 650.6, 644.83, 639.4, 634.33, 630.5 });
		STravelTimeTable.add(new double[] { 746.97, 743.16, 738.6, 735.99, 727.32, 718.72, 710.18, 701.81, 693.74,
				685.98, 678.52, 671.88, 665.7, 659.87, 654.38, 649.25, 645.33 });
		STravelTimeTable.add(new double[] { 762.32, 758.51, 753.95, 751.32, 742.62, 733.99, 725.43, 717.02, 708.92,
				701.12, 693.63, 686.93, 680.7, 674.82, 669.28, 664.08, 660.08 });
		STravelTimeTable.add(new double[] { 777.6, 773.79, 769.21, 766.58, 757.85, 749.19, 740.59, 732.15, 724.01,
				716.18, 708.64, 701.9, 695.62, 689.68, 684.09, 678.83, 674.74 });
		STravelTimeTable.add(new double[] { 792.8, 788.98, 784.39, 781.75, 772.99, 764.3, 755.67, 747.19, 739.02,
				731.14, 723.57, 716.78, 710.45, 704.46, 698.8, 693.48, 689.31 });
		STravelTimeTable.add(new double[] { 807.91, 804.08, 799.48, 796.83, 788.04, 779.32, 770.65, 762.14, 753.93,
				746.02, 738.4, 731.57, 725.19, 719.14, 713.42, 708.04, 703.79 });
		STravelTimeTable.add(new double[] { 822.93, 819.09, 814.49, 811.83, 803.0, 794.24, 785.55, 777.0, 768.75, 760.8,
				753.14, 746.26, 739.83, 733.73, 727.95, 722.51, 718.18 });
		STravelTimeTable.add(new double[] { 837.86, 834.01, 829.4, 826.73, 817.87, 809.08, 800.35, 791.77, 783.48,
				775.49, 767.79, 760.86, 754.38, 748.22, 742.39, 736.88, 732.47 });
		STravelTimeTable.add(new double[] { 852.69, 848.84, 844.21, 841.53, 832.64, 823.82, 815.05, 806.44, 798.11,
				790.08, 782.34, 775.36, 768.83, 762.62, 756.73, 751.15, 746.66 });
		STravelTimeTable.add(new double[] { 867.42, 863.57, 858.93, 856.24, 847.32, 838.46, 829.66, 821.01, 812.65,
				804.57, 796.79, 789.77, 783.18, 776.92, 770.97, 765.33, 760.76 });
		STravelTimeTable.add(new double[] { 882.06, 878.2, 873.56, 870.86, 861.9, 853.0, 844.17, 835.48, 827.08, 818.97,
				811.14, 804.07, 797.43, 791.11, 785.1, 779.41, 774.76 });
		STravelTimeTable.add(new double[] { 896.6, 892.73, 888.08, 885.37, 876.38, 867.45, 858.58, 849.85, 841.41,
				833.26, 825.39, 818.27, 811.58, 805.21, 799.14, 793.38, 788.66 });
		STravelTimeTable.add(new double[] { 911.04, 907.16, 902.5, 899.78, 890.75, 881.79, 872.88, 864.12, 855.64,
				847.45, 839.54, 832.37, 825.63, 819.2, 813.08, 807.26, 802.46 });
		STravelTimeTable.add(new double[] { 925.37, 921.49, 916.81, 914.08, 905.02, 896.02, 887.08, 878.28, 869.77,
				861.53, 853.58, 846.37, 839.58, 833.09, 826.91, 821.03, 816.16 });
		STravelTimeTable.add(new double[] { 939.6, 935.71, 931.02, 928.28, 919.19, 910.15, 901.18, 892.34, 883.79,
				875.51, 867.52, 860.26, 853.42, 846.88, 840.64, 834.7, 829.76 });
		STravelTimeTable.add(new double[] { 953.72, 949.82, 945.13, 942.38, 933.25, 924.18, 915.17, 906.29, 897.7,
				889.39, 881.35, 874.04, 867.15, 860.56, 854.27, 848.27, 843.27 });
		STravelTimeTable.add(new double[] { 967.73, 963.83, 959.12, 956.36, 947.2, 938.09, 929.05, 920.14, 911.51,
				903.15, 895.07, 887.72, 880.78, 874.14, 867.8, 861.75, 856.67 });
		STravelTimeTable.add(new double[] { 981.64, 977.73, 973.01, 970.24, 961.04, 951.9, 942.82, 933.87, 925.2,
				916.81, 908.69, 901.3, 894.31, 887.62, 881.23, 875.12, 869.98 });
		STravelTimeTable.add(new double[] { 995.43, 991.52, 986.79, 984.01, 974.77, 965.6, 956.48, 947.5, 938.8, 930.37,
				922.21, 914.77, 907.74, 901.0, 894.55, 888.39, 883.18 });
		STravelTimeTable.add(new double[] { 1009.12, 1005.19, 1000.45, 997.66, 988.4, 979.19, 970.04, 961.03, 952.29,
				943.82, 935.63, 928.14, 921.06, 914.28, 907.77, 901.56, 896.28 });
		STravelTimeTable.add(new double[] { 1022.7, 1018.77, 1014.02, 1011.22, 1001.92, 992.68, 983.5, 974.45, 965.68,
				957.17, 948.93, 941.41, 934.28, 927.44, 920.89, 914.62, 909.27 });
		STravelTimeTable.add(new double[] { 1036.17, 1032.23, 1027.47, 1024.67, 1015.34, 1006.07, 996.85, 987.77,
				978.96, 970.41, 962.13, 954.56, 947.39, 940.5, 933.9, 927.57, 922.17 });
		STravelTimeTable.add(new double[] { 1049.54, 1045.59, 1040.82, 1038.0, 1028.65, 1019.34, 1010.09, 1000.97,
				992.12, 983.54, 975.23, 967.61, 960.39, 953.46, 946.8, 940.42, 934.96 });
		STravelTimeTable.add(new double[] { 1062.79, 1058.84, 1054.06, 1051.23, 1041.84, 1032.5, 1023.22, 1014.07,
				1005.18, 996.56, 988.21, 980.55, 973.29, 966.31, 959.6, 953.17, 947.64 });
		STravelTimeTable.add(new double[] { 1075.94, 1071.98, 1067.19, 1064.35, 1054.93, 1045.56, 1036.24, 1027.05,
				1018.13, 1009.48, 1001.08, 993.39, 986.08, 979.05, 972.3, 965.81, 960.22 });
		STravelTimeTable.add(new double[] { 1088.97, 1085.0, 1080.2, 1077.35, 1067.9, 1058.5, 1049.15, 1039.93, 1030.97,
				1022.28, 1013.85, 1006.11, 998.76, 991.68, 984.88, 978.35, 972.69 });
		STravelTimeTable.add(new double[] { 1101.89, 1097.91, 1093.11, 1090.25, 1080.76, 1071.33, 1061.95, 1052.69,
				1043.71, 1034.98, 1026.51, 1018.73, 1011.33, 1004.21, 997.36, 990.77, 985.06 });
		STravelTimeTable.add(new double[] { 1114.7, 1110.72, 1105.9, 1103.03, 1093.52, 1084.05, 1074.64, 1065.35,
				1056.33, 1047.57, 1039.06, 1031.24, 1023.8, 1016.63, 1009.73, 1003.09, 997.33 });
		STravelTimeTable.add(new double[] { 1127.39, 1123.41, 1118.58, 1115.71, 1106.16, 1096.66, 1087.21, 1077.89,
				1068.84, 1060.04, 1051.5, 1043.63, 1036.15, 1028.94, 1021.99, 1015.31, 1009.48 });
		STravelTimeTable.add(new double[] { 1139.98, 1135.99, 1131.15, 1128.26, 1118.68, 1109.16, 1099.68, 1090.33,
				1081.24, 1072.4, 1063.82, 1055.92, 1048.39, 1041.14, 1034.15, 1027.41, 1021.53 });
		STravelTimeTable.add(new double[] { 1152.45, 1148.45, 1143.6, 1140.71, 1131.1, 1121.54, 1112.03, 1102.65,
				1093.52, 1084.66, 1076.04, 1068.1, 1060.53, 1053.23, 1046.19, 1039.41, 1033.48 });
		STravelTimeTable.add(new double[] { 1164.8, 1160.8, 1155.94, 1153.04, 1143.4, 1133.81, 1124.27, 1114.86, 1105.7,
				1096.8, 1088.15, 1080.17, 1072.56, 1065.22, 1058.13, 1051.3, 1045.31 });
		STravelTimeTable.add(new double[] { 1177.05, 1173.04, 1168.17, 1165.26, 1155.59, 1145.97, 1136.4, 1126.95,
				1117.77, 1108.83, 1100.14, 1092.12, 1084.47, 1077.09, 1069.96, 1063.09, 1057.04 });
		STravelTimeTable.add(new double[] { 1189.18, 1185.16, 1180.28, 1177.36, 1167.67, 1158.02, 1148.42, 1138.94,
				1129.72, 1120.75, 1112.03, 1103.97, 1096.28, 1088.85, 1081.68, 1074.76, 1068.66 });
		STravelTimeTable.add(new double[] { 1201.19, 1197.17, 1192.29, 1189.36, 1179.63, 1169.95, 1160.32, 1150.81,
				1141.56, 1132.56, 1123.8, 1115.71, 1107.98, 1100.51, 1093.29, 1086.33, 1080.18 });
		STravelTimeTable.add(new double[] { 1213.09, 1209.07, 1204.17, 1201.23, 1191.48, 1181.77, 1172.11, 1162.57,
				1153.29, 1144.25, 1135.46, 1127.33, 1119.56, 1112.05, 1104.79, 1097.78, 1091.58 });
		STravelTimeTable.add(new double[] { 1224.88, 1220.85, 1215.94, 1213.0, 1203.21, 1193.48, 1183.79, 1174.22,
				1164.9, 1155.84, 1147.01, 1138.84, 1131.03, 1123.48, 1116.18, 1109.12, 1102.86 });
		STravelTimeTable.add(new double[] { 1236.55, 1232.51, 1227.6, 1224.65, 1214.83, 1205.07, 1195.35, 1185.75,
				1176.4, 1167.3, 1158.44, 1150.24, 1142.39, 1134.79, 1127.45, 1120.35, 1114.04 });
		STravelTimeTable.add(new double[] { 1248.11, 1244.06, 1239.14, 1236.18, 1226.34, 1216.54, 1206.8, 1197.17,
				1187.79, 1178.65, 1169.76, 1161.52, 1153.63, 1145.99, 1138.61, 1131.46, 1125.11 });
		STravelTimeTable.add(new double[] { 1259.55, 1255.49, 1250.57, 1247.59, 1237.73, 1227.9, 1218.12, 1208.46,
				1199.05, 1189.89, 1180.96, 1172.68, 1164.76, 1157.08, 1149.65, 1142.46, 1136.06 });
		STravelTimeTable.add(new double[] { 1270.87, 1266.81, 1261.87, 1258.89, 1248.99, 1239.14, 1229.33, 1219.64,
				1210.2, 1201.01, 1192.05, 1183.73, 1175.77, 1168.06, 1160.59, 1153.35, 1146.9 });
		STravelTimeTable.add(new double[] { 1282.07, 1278.0, 1273.05, 1270.07, 1260.14, 1250.26, 1240.42, 1230.71,
				1221.24, 1212.01, 1203.02, 1194.67, 1186.67, 1178.92, 1171.4, 1164.13, 1157.63 });
		STravelTimeTable.add(new double[] { 1293.15, 1289.08, 1284.12, 1281.12, 1271.17, 1261.27, 1251.4, 1241.66,
				1232.16, 1222.9, 1213.87, 1205.49, 1197.45, 1189.66, 1182.11, 1174.79, 1168.25 });
		STravelTimeTable.add(new double[] { 1304.11, 1300.03, 1295.07, 1292.07, 1282.09, 1272.15, 1262.26, 1252.49,
				1242.96, 1233.67, 1224.61, 1216.19, 1208.11, 1200.29, 1192.7, 1185.34, 1178.75 });
		STravelTimeTable.add(new double[] { 1314.95, 1310.87, 1305.9, 1302.89, 1292.88, 1282.92, 1273.0, 1263.2,
				1253.64, 1244.32, 1235.23, 1226.78, 1218.67, 1210.8, 1203.17, 1195.78, 1189.14 });
		STravelTimeTable.add(new double[] { 1325.68, 1321.59, 1316.61, 1313.59, 1303.55, 1293.57, 1283.62, 1273.79,
				1264.2, 1254.85, 1245.74, 1237.25, 1229.1, 1221.2, 1213.53, 1206.09, 1199.41 });
		STravelTimeTable.add(new double[] { 1336.28, 1332.19, 1327.2, 1324.17, 1314.11, 1304.1, 1294.12, 1284.27,
				1274.65, 1265.27, 1256.12, 1247.6, 1239.42, 1231.48, 1223.77, 1216.29, 1209.56 });
		STravelTimeTable.add(new double[] { 1346.77, 1342.67, 1337.67, 1334.63, 1324.55, 1314.51, 1304.51, 1294.62,
				1284.98, 1275.57, 1266.39, 1257.83, 1249.61, 1241.63, 1233.88, 1226.37, 1219.59 });
		STravelTimeTable.add(new double[] { 1357.13, 1353.02, 1348.02, 1344.97, 1334.86, 1324.79, 1314.76, 1304.85,
				1295.18, 1285.74, 1276.52, 1267.93, 1259.68, 1251.67, 1243.88, 1236.32, 1229.5 });
		STravelTimeTable.add(new double[] { 1367.36, 1363.25, 1358.23, 1355.19, 1345.05, 1334.95, 1324.9, 1314.96,
				1305.25, 1295.78, 1286.54, 1277.92, 1269.63, 1261.58, 1253.76, 1246.16, 1239.3 });
		STravelTimeTable.add(new double[] { 1377.47, 1373.35, 1368.33, 1365.27, 1355.11, 1344.99, 1334.91, 1324.94,
				1315.21, 1305.71, 1296.44, 1287.78, 1279.46, 1271.37, 1263.52, 1255.88, 1248.97 });
		STravelTimeTable.add(new double[] { 1387.45, 1383.33, 1378.3, 1375.23, 1365.05, 1354.9, 1344.79, 1334.8,
				1325.04, 1315.51, 1306.21, 1297.52, 1289.16, 1281.04, 1273.15, 1265.47, 1258.52 });
		STravelTimeTable.add(new double[] { 1397.31, 1393.18, 1388.14, 1385.07, 1374.86, 1364.69, 1354.55, 1344.53,
				1334.74, 1325.19, 1315.86, 1307.13, 1298.74, 1290.59, 1282.65, 1274.94, 1267.94 });
		STravelTimeTable.add(new double[] { 1407.04, 1402.91, 1397.86, 1394.78, 1384.54, 1374.34, 1364.18, 1354.14,
				1344.32, 1334.74, 1325.37, 1316.62, 1308.19, 1300.0, 1292.03, 1284.28, 1277.24 });
		STravelTimeTable.add(new double[] { 1416.64, 1412.5, 1407.45, 1404.36, 1394.1, 1383.87, 1373.69, 1363.61,
				1353.77, 1344.15, 1334.76, 1325.97, 1317.52, 1309.29, 1301.28, 1293.49, 1286.41 });
		STravelTimeTable.add(new double[] { 1426.11, 1421.97, 1416.9, 1413.81, 1403.52, 1393.27, 1383.05, 1372.95,
				1363.08, 1353.44, 1344.02, 1335.2, 1326.71, 1318.44, 1310.4, 1302.57, 1295.45 });
		STravelTimeTable.add(new double[] { 1435.44, 1431.29, 1426.22, 1423.12, 1412.8, 1402.53, 1392.29, 1382.16,
				1372.26, 1362.59, 1353.14, 1344.29, 1335.77, 1327.47, 1319.39, 1311.53, 1304.36 });
		STravelTimeTable.add(new double[] { 1444.64, 1440.49, 1435.41, 1432.3, 1421.96, 1411.66, 1401.39, 1391.24,
				1381.31, 1371.62, 1362.14, 1353.25, 1344.7, 1336.37, 1328.25, 1320.35, 1313.16 });
		STravelTimeTable.add(new double[] { 1453.71, 1449.55, 1444.46, 1441.34, 1430.98, 1420.65, 1410.36, 1400.18,
				1390.23, 1380.51, 1371.0, 1362.09, 1353.5, 1345.14, 1337.01, 1329.09, 1321.88 });
		STravelTimeTable.add(new double[] { 1462.63, 1458.47, 1453.37, 1450.25, 1439.86, 1429.51, 1419.2, 1409.0,
				1399.02, 1389.28, 1379.75, 1370.83, 1362.23, 1353.86, 1345.71, 1337.78, 1330.56 });
		STravelTimeTable.add(new double[] { 1471.43, 1467.26, 1462.16, 1459.03, 1448.63, 1438.27, 1427.94, 1417.73,
				1407.74, 1397.99, 1388.46, 1379.52, 1370.91, 1362.53, 1354.37, 1346.42, 1339.18 });
		STravelTimeTable.add(new double[] { 1480.16, 1475.98, 1470.88, 1467.75, 1457.34, 1446.97, 1436.63, 1426.41,
				1416.42, 1406.65, 1397.11, 1388.16, 1379.54, 1371.14, 1362.96, 1355.0, 1347.73 });
		STravelTimeTable.add(new double[] { 1488.83, 1484.66, 1479.55, 1476.42, 1466.0, 1455.62, 1445.27, 1435.04,
				1425.04, 1415.26, 1405.7, 1396.73, 1388.09, 1379.68, 1371.48, 1363.49, 1356.2 });
		STravelTimeTable.add(new double[] { 1497.46, 1493.28, 1488.17, 1485.03, 1474.6, 1464.2, 1453.85, 1443.6,
				1433.58, 1423.79, 1414.21, 1405.23, 1396.57, 1388.14, 1379.92, 1371.91, 1364.6 });
		STravelTimeTable.add(new double[] { 1506.0, 1501.82, 1496.71, 1493.57, 1483.12, 1472.71, 1462.34, 1452.08,
				1442.05, 1432.24, 1422.65, 1413.65, 1404.97, 1396.51, 1388.28, 1380.26, 1372.94 });
		STravelTimeTable.add(new double[] { 1514.47, 1510.29, 1505.17, 1502.02, 1491.56, 1481.14, 1470.76, 1460.48,
				1450.43, 1440.61, 1431.01, 1422.0, 1413.31, 1404.86, 1396.62, 1388.6, 1381.28 });
		STravelTimeTable.add(new double[] { 1522.86, 1518.67, 1513.55, 1510.4, 1499.93, 1489.5, 1479.1, 1468.82,
				1458.77, 1448.95, 1439.35, 1430.34, 1421.65, 1413.2, 1404.96, 1396.94, 1389.62 });
		STravelTimeTable.add(new double[] { 1531.2, 1527.01, 1521.89, 1518.74, 1508.27, 1497.84, 1487.45, 1477.16,
				1467.11, 1457.29, 1447.69, 1438.68, 1429.99, 1421.54, 1413.3, 1405.28, 1397.96 });
		STravelTimeTable.add(new double[] { 1539.54, 1535.35, 1530.23, 1527.08, 1516.61, 1506.18, 1495.79, 1485.51,
				1475.45, 1465.63, 1456.03, 1447.02, 1438.33, 1429.88, 1421.64, 1413.62, 1406.3 });
		STravelTimeTable.add(new double[] { 1547.88, 1543.69, 1538.57, 1535.42, 1524.95, 1514.52, 1504.13, 1493.85,
				1483.8, 1473.97, 1464.37, 1455.36, 1446.67, 1438.22, 1429.98, 1421.96, 1414.64 });
		STravelTimeTable.add(new double[] { 1556.22, 1552.03, 1546.91, 1543.76, 1533.29, 1522.86, 1512.47, 1502.19,
				1492.14, 1482.31, 1472.71, 1463.7, 1455.01, 1446.56, 1438.32, 1430.31, 1422.98 });
		STravelTimeTable.add(new double[] { 1564.56, 1560.37, 1555.25, 1552.1, 1541.63, 1531.2, 1520.81, 1510.53,
				1500.48, 1490.65, 1481.05, 1472.04, 1463.36, 1454.9, 1446.66, 1438.65, 1431.32 });
		STravelTimeTable.add(new double[] { 1572.9, 1568.71, 1563.59, 1560.44, 1549.97, 1539.54, 1529.15, 1518.87,
				1508.82, 1498.99, 1489.39, 1480.38, 1471.7, 1463.24, 1455.0, 1446.99, 1439.66 });
		STravelTimeTable.add(new double[] { 1581.24, 1577.05, 1571.93, 1568.78, 1558.31, 1547.88, 1537.49, 1527.21,
				1517.16, 1507.33, 1497.73, 1488.72, 1480.04, 1471.58, 1463.35, 1455.33, 1448.01 });
		STravelTimeTable.add(new double[] { 1589.58, 1585.39, 1580.27, 1577.12, 1566.65, 1556.22, 1545.83, 1535.55,
				1525.5, 1515.67, 1506.07, 1497.06, 1488.38, 1479.92, 1471.69, 1463.67, 1456.35 });
		STravelTimeTable.add(new double[] { 1597.92, 1593.74, 1588.61, 1585.46, 1574.99, 1564.56, 1554.17, 1543.89,
				1533.84, 1524.02, 1514.41, 1505.4, 1496.72, 1488.26, 1480.03, 1472.01, 1464.69 });
		STravelTimeTable.add(new double[] { 1606.26, 1602.08, 1596.95, 1593.8, 1583.33, 1572.9, 1562.51, 1552.23,
				1542.18, 1532.36, 1522.75, 1513.74, 1505.06, 1496.6, 1488.37, 1480.35, 1473.03 });
		STravelTimeTable.add(new double[] { 1614.6, 1610.42, 1605.29, 1602.14, 1591.67, 1581.24, 1570.85, 1560.57,
				1550.52, 1540.7, 1531.09, 1522.08, 1513.4, 1504.94, 1496.71, 1488.69, 1481.37 });
		STravelTimeTable.add(new double[] { 1622.94, 1618.76, 1613.63, 1610.48, 1600.01, 1589.58, 1579.19, 1568.91,
				1558.86, 1549.04, 1539.43, 1530.42, 1521.74, 1513.28, 1505.05, 1497.03, 1489.71 });
		STravelTimeTable.add(new double[] { 1631.28, 1627.1, 1621.97, 1618.82, 1608.35, 1597.92, 1587.53, 1577.25,
				1567.2, 1557.38, 1547.77, 1538.76, 1530.08, 1521.62, 1513.39, 1505.37, 1498.05 });
		STravelTimeTable.add(new double[] { 1639.62, 1635.44, 1630.31, 1627.16, 1616.69, 1606.26, 1595.87, 1585.59,
				1575.54, 1565.72, 1556.11, 1547.1, 1538.42, 1529.96, 1521.73, 1513.71, 1506.39 });
		STravelTimeTable.add(new double[] { 1647.97, 1643.78, 1638.65, 1635.51, 1625.03, 1614.61, 1604.21, 1593.93,
				1583.88, 1574.06, 1564.46, 1555.45, 1546.76, 1538.31, 1530.07, 1522.05, 1514.73 });
		STravelTimeTable.add(new double[] { 1656.31, 1652.12, 1647.0, 1643.85, 1633.38, 1622.95, 1612.55, 1602.27,
				1592.22, 1582.4, 1572.8, 1563.79, 1555.1, 1546.65, 1538.41, 1530.39, 1523.07 });
		STravelTimeTable.add(new double[] { 1664.65, 1660.46, 1655.34, 1652.19, 1641.72, 1631.29, 1620.89, 1610.61,
				1600.56, 1590.74, 1581.14, 1572.13, 1563.44, 1554.99, 1546.75, 1538.73, 1531.41 });
		STravelTimeTable.add(new double[] { 1672.99, 1668.8, 1663.68, 1660.53, 1650.06, 1639.63, 1629.24, 1618.95,
				1608.9, 1599.08, 1589.48, 1580.47, 1571.78, 1563.33, 1555.09, 1547.07, 1539.75 });
		STravelTimeTable.add(new double[] { 1681.33, 1677.14, 1672.02, 1668.87, 1658.4, 1647.97, 1637.58, 1627.3,
				1617.25, 1607.42, 1597.82, 1588.81, 1580.12, 1571.67, 1563.43, 1555.41, 1548.09 });
		STravelTimeTable.add(new double[] { 1689.67, 1685.48, 1680.36, 1677.21, 1666.74, 1656.31, 1645.92, 1635.64,
				1625.59, 1615.76, 1606.16, 1597.15, 1588.46, 1580.01, 1571.77, 1563.75, 1556.43 });
		STravelTimeTable.add(new double[] { 1698.01, 1693.82, 1688.7, 1685.55, 1675.08, 1664.65, 1654.26, 1643.98,
				1633.93, 1624.1, 1614.5, 1605.49, 1596.8, 1588.35, 1580.11, 1572.1, 1564.77 });
		STravelTimeTable.add(new double[] { 1706.35, 1702.16, 1697.04, 1693.89, 1683.42, 1672.99, 1662.6, 1652.32,
				1642.27, 1632.44, 1622.84, 1613.83, 1605.15, 1596.69, 1588.45, 1580.44, 1573.11 });
		STravelTimeTable.add(new double[] { 1714.69, 1710.5, 1705.38, 1702.23, 1691.76, 1681.33, 1670.94, 1660.66,
				1650.61, 1640.78, 1631.18, 1622.17, 1613.49, 1605.03, 1596.8, 1588.78, 1581.45 });
		STravelTimeTable.add(new double[] { 1723.03, 1718.84, 1713.72, 1710.57, 1700.1, 1689.67, 1679.28, 1669.0,
				1658.95, 1649.12, 1639.52, 1630.51, 1621.83, 1613.37, 1605.14, 1597.12, 1589.8 });
		STravelTimeTable.add(new double[] { 1731.37, 1727.18, 1722.06, 1718.91, 1708.44, 1698.01, 1687.62, 1677.34,
				1667.29, 1657.46, 1647.86, 1638.85, 1630.17, 1621.71, 1613.48, 1605.46, 1598.14 });

		PKPTravelTimeTable.add(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 });
		PKPTravelTimeTable.add(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 });
		PKPTravelTimeTable.add(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 1085.33, 1063.71, 1044.28 });
		PKPTravelTimeTable.add(new double[] { 1124.84, 1119.11, 1117.27, 1111.11, 1098.95, 1087.25, 1065.64, 1046.21 });
		PKPTravelTimeTable.add(new double[] { 1126.76, 1121.04, 1119.19, 1113.04, 1100.88, 1089.17, 1067.56, 1048.13 });
		PKPTravelTimeTable.add(new double[] { 1128.68, 1122.96, 1121.11, 1114.96, 1102.8, 1091.1, 1069.49, 1050.05 });
		PKPTravelTimeTable.add(new double[] { 1130.61, 1124.88, 1123.04, 1116.88, 1104.72, 1093.02, 1071.41, 1051.98 });
		PKPTravelTimeTable.add(new double[] { 1132.53, 1126.81, 1124.96, 1118.81, 1106.65, 1094.94, 1073.33, 1053.9 });
		PKPTravelTimeTable.add(new double[] { 1134.45, 1128.73, 1126.88, 1120.73, 1108.57, 1096.86, 1075.25, 1055.82 });
		PKPTravelTimeTable.add(new double[] { 1136.37, 1130.65, 1128.8, 1122.65, 1110.49, 1098.79, 1077.17, 1057.74 });
		PKPTravelTimeTable.add(new double[] { 1138.29, 1132.57, 1130.72, 1124.57, 1112.41, 1100.7, 1079.09, 1059.66 });
		PKPTravelTimeTable.add(new double[] { 1140.21, 1134.49, 1132.64, 1126.49, 1114.33, 1102.62, 1081.01, 1061.57 });
		PKPTravelTimeTable.add(new double[] { 1142.13, 1136.4, 1134.56, 1128.4, 1116.24, 1104.54, 1082.92, 1063.49 });
		PKPTravelTimeTable.add(new double[] { 1144.04, 1138.32, 1136.47, 1130.32, 1118.15, 1106.45, 1084.83, 1065.4 });
		PKPTravelTimeTable.add(new double[] { 1145.95, 1140.23, 1138.38, 1132.23, 1120.06, 1108.36, 1086.74, 1067.3 });
		PKPTravelTimeTable.add(new double[] { 1147.86, 1142.14, 1140.29, 1134.13, 1121.97, 1110.27, 1088.65, 1069.21 });
		PKPTravelTimeTable.add(new double[] { 1149.76, 1144.04, 1142.19, 1136.04, 1123.88, 1112.17, 1090.55, 1071.11 });
		PKPTravelTimeTable.add(new double[] { 1151.67, 1145.94, 1144.09, 1137.94, 1125.78, 1114.07, 1092.45, 1073.0 });
		PKPTravelTimeTable.add(new double[] { 1153.56, 1147.84, 1145.99, 1139.83, 1127.67, 1115.96, 1094.34, 1074.9 });
		PKPTravelTimeTable.add(new double[] { 1155.45, 1149.73, 1147.88, 1141.72, 1129.56, 1117.85, 1096.23, 1076.78 });
		PKPTravelTimeTable.add(new double[] { 1157.34, 1151.61, 1149.77, 1143.61, 1131.45, 1119.74, 1098.11, 1078.66 });
		PKPTravelTimeTable.add(new double[] { 1159.22, 1153.49, 1151.65, 1145.49, 1133.32, 1121.61, 1099.98, 1080.53 });
		PKPTravelTimeTable.add(new double[] { 1161.09, 1155.37, 1153.52, 1147.36, 1135.19, 1123.48, 1101.85, 1082.4 });
		PKPTravelTimeTable.add(new double[] { 1162.96, 1157.23, 1155.38, 1149.22, 1137.06, 1125.34, 1103.71, 1084.25 });
		PKPTravelTimeTable.add(new double[] { 1164.81, 1159.08, 1157.24, 1151.08, 1138.91, 1127.19, 1105.56, 1086.09 });
		PKPTravelTimeTable.add(new double[] { 1166.66, 1160.93, 1159.08, 1152.92, 1140.75, 1129.04, 1107.4, 1087.93 });
		PKPTravelTimeTable.add(new double[] { 1168.49, 1162.76, 1160.91, 1154.76, 1142.58, 1130.87, 1109.22, 1089.75 });
		PKPTravelTimeTable.add(new double[] { 1170.31, 1164.59, 1162.74, 1156.58, 1144.4, 1132.68, 1111.04, 1091.56 });
		PKPTravelTimeTable.add(new double[] { 1172.12, 1166.39, 1164.54, 1158.38, 1146.21, 1134.49, 1112.83, 1093.35 });
		PKPTravelTimeTable.add(new double[] { 1173.92, 1168.19, 1166.34, 1160.18, 1148.0, 1136.27, 1114.62, 1095.13 });
		PKPTravelTimeTable.add(new double[] { 1175.69, 1169.96, 1168.11, 1161.95, 1149.77, 1138.04, 1116.38, 1096.88 });
		PKPTravelTimeTable.add(new double[] { 1177.45, 1171.72, 1169.87, 1163.71, 1151.52, 1139.79, 1118.13, 1098.62 });
		PKPTravelTimeTable.add(new double[] { 1179.19, 1173.46, 1171.61, 1165.44, 1153.26, 1141.52, 1119.85, 1100.34 });
		PKPTravelTimeTable.add(new double[] { 1180.9, 1175.17, 1173.32, 1167.15, 1154.96, 1143.23, 1121.55, 1102.02 });
		PKPTravelTimeTable.add(new double[] { 1182.59, 1176.86, 1175.01, 1168.84, 1156.65, 1144.91, 1123.22, 1103.69 });
		PKPTravelTimeTable.add(new double[] { 1184.25, 1178.52, 1176.67, 1170.5, 1158.3, 1146.56, 1124.86, 1105.32 });
		PKPTravelTimeTable.add(new double[] { 1185.88, 1180.15, 1178.3, 1172.12, 1159.93, 1148.18, 1126.47, 1106.92 });
		PKPTravelTimeTable.add(new double[] { 1187.48, 1181.74, 1179.89, 1173.72, 1161.51, 1149.76, 1128.05, 1108.48 });
		PKPTravelTimeTable.add(new double[] { 1189.04, 1183.3, 1181.45, 1175.27, 1163.06, 1151.31, 1129.58, 1110.0 });
		PKPTravelTimeTable.add(new double[] { 1190.55, 1184.82, 1182.96, 1176.78, 1164.57, 1152.81, 1131.07, 1111.49 });
		PKPTravelTimeTable.add(new double[] { 1192.03, 1186.29, 1184.44, 1178.26, 1166.04, 1154.28, 1132.53, 1112.93 });
		PKPTravelTimeTable.add(new double[] { 1193.47, 1187.73, 1185.87, 1179.69, 1167.47, 1155.7, 1133.94, 1114.33 });
		PKPTravelTimeTable.add(new double[] { 1194.86, 1189.12, 1187.26, 1181.08, 1168.85, 1157.08, 1135.31, 1115.69 });
		PKPTravelTimeTable.add(new double[] { 1196.2, 1190.46, 1188.61, 1182.42, 1170.19, 1158.42, 1136.63, 1117.0 });
		PKPTravelTimeTable.add(new double[] { 1197.5, 1191.76, 1189.9, 1183.72, 1171.48, 1159.7, 1137.91, 1118.26 });
		PKPTravelTimeTable.add(new double[] { 1198.75, 1193.01, 1191.15, 1184.96, 1172.73, 1160.94, 1139.14, 1119.48 });
		PKPTravelTimeTable.add(new double[] { 1199.96, 1194.21, 1192.35, 1186.16, 1173.92, 1162.13, 1140.32, 1120.64 });
		PKPTravelTimeTable.add(new double[] { 1201.11, 1195.36, 1193.5, 1187.31, 1175.06, 1163.27, 1141.45, 1121.76 });
		PKPTravelTimeTable.add(new double[] { 1202.2, 1196.46, 1194.6, 1188.4, 1176.15, 1164.35, 1142.52, 1122.83 });
		PKPTravelTimeTable.add(new double[] { 1203.25, 1197.5, 1195.64, 1189.44, 1177.19, 1165.39, 1143.55, 1123.84 });
		PKPTravelTimeTable.add(new double[] { 1204.24, 1198.49, 1196.63, 1190.43, 1178.18, 1166.37, 1144.52, 1124.81 });
		PKPTravelTimeTable.add(new double[] { 1205.18, 1199.43, 1197.57, 1191.37, 1179.11, 1167.3, 1145.44, 1125.72 });
		PKPTravelTimeTable.add(new double[] { 1206.06, 1200.31, 1198.45, 1192.25, 1179.99, 1168.17, 1146.31, 1126.57 });
		PKPTravelTimeTable.add(new double[] { 1206.89, 1201.14, 1199.28, 1193.07, 1180.81, 1168.99, 1147.12, 1127.37 });
		PKPTravelTimeTable.add(new double[] { 1207.66, 1201.91, 1200.05, 1193.84, 1181.58, 1169.75, 1147.88, 1128.12 });
		PKPTravelTimeTable.add(new double[] { 1208.38, 1202.63, 1200.77, 1194.56, 1182.29, 1170.46, 1148.58, 1128.82 });
		PKPTravelTimeTable.add(new double[] { 1209.04, 1203.29, 1201.43, 1195.22, 1182.94, 1171.12, 1149.22, 1129.46 });
		PKPTravelTimeTable.add(new double[] { 1209.64, 1203.89, 1202.03, 1195.82, 1183.54, 1171.71, 1149.81, 1130.04 });
		PKPTravelTimeTable.add(new double[] { 1210.19, 1204.44, 1202.57, 1196.36, 1184.08, 1172.25, 1150.35, 1130.57 });
		PKPTravelTimeTable.add(new double[] { 1210.68, 1204.93, 1203.06, 1196.85, 1184.57, 1172.74, 1150.83, 1131.04 });
		PKPTravelTimeTable.add(new double[] { 1211.11, 1205.36, 1203.49, 1197.28, 1185.0, 1173.16, 1151.25, 1131.46 });
		PKPTravelTimeTable.add(new double[] { 1211.49, 1205.73, 1203.87, 1197.65, 1185.37, 1173.53, 1151.62, 1131.83 });
		PKPTravelTimeTable.add(new double[] { 1211.81, 1206.05, 1204.19, 1197.97, 1185.69, 1173.85, 1151.93, 1132.13 });
		PKPTravelTimeTable.add(new double[] { 1212.07, 1206.31, 1204.44, 1198.23, 1185.94, 1174.1, 1152.18, 1132.38 });
		PKPTravelTimeTable.add(new double[] { 1212.27, 1206.51, 1204.65, 1198.43, 1186.14, 1174.3, 1152.38, 1132.58 });
		PKPTravelTimeTable.add(new double[] { 1212.41, 1206.66, 1204.79, 1198.58, 1186.29, 1174.45, 1152.52, 1132.72 });
		PKPTravelTimeTable.add(new double[] { 1212.5, 1206.74, 1204.88, 1198.66, 1186.37, 1174.53, 1152.61, 1132.8 });
		PKPTravelTimeTable.add(new double[] { 1212.53, 1206.77, 1204.91, 1198.69, 1186.4, 1174.56, 1152.64, 1132.83 });

		dataCheck();
	}

	private static void dataCheck() {
		int errors = 0;
		for (int i = 0; i < PTravelTimeTable.size() - 1; i++) {
			for (int j = 0; j < DEPTHS.length; j++) {
				if (PTravelTimeTable.get(i + 1)[j] < PTravelTimeTable.get(i)[j]) {
					errors++;
				}
			}
		}
		for (int i = 0; i < STravelTimeTable.size() - 1; i++) {
			for (int j = 0; j < DEPTHS.length; j++) {
				if (STravelTimeTable.get(i + 1)[j] < STravelTimeTable.get(i)[j]) {
					errors++;
				}
			}
		}
		System.out.println("[TravelTimeTable] found " + errors + " errors.");
	}

	@SuppressWarnings("unused")
	public static double getPKPWaveTravelTime(double depth, double angle) {
		double val = _getPKPWaveTravelTime(depth, angle);
		if (val == 0) {
			return Double.POSITIVE_INFINITY;
		} else {
			return val;
		}
	}

	private static double _getPKPWaveTravelTime(double depth, double angle) {
		depth = Math.max(0, Math.min(DEPTHS_PKP[DEPTHS_PKP.length - 1], depth));
		int d = 0;
		double q = 0;
		for (int i = 0; i < DEPTHS_PKP.length - 1; i++) {
			if (DEPTHS_PKP[i + 1] >= depth) {
				d = i;
				double max = DEPTHS_PKP[i + 1];
				double min = DEPTHS_PKP[i];
				q = (depth - min) / (max - min);
				break;
			}
		}

		if (angle <= PKP_START) {
			return Double.POSITIVE_INFINITY;
		} else if (angle - PKP_START >= PKPTravelTimeTable.size() - 1) {
			return PKPTravelTimeTable.get(PKPTravelTimeTable.size() - 1)[d] * (1 - q)
					+ PKPTravelTimeTable.get(PKPTravelTimeTable.size() - 1)[d + 1] * (q);
		}

		int low = (int) (angle - PKP_START);
		int high = low + 1;

		double valHigh = PKPTravelTimeTable.get(high)[d] * (1 - q) + PKPTravelTimeTable.get(high)[d + 1] * (q);
		double valLow = PKPTravelTimeTable.get(low)[d] * (1 - q) + PKPTravelTimeTable.get(low)[d + 1] * (q);

		if (PKPTravelTimeTable.get(high)[d] <= 0 || PKPTravelTimeTable.get(high)[d + 1] <= 0
				|| PKPTravelTimeTable.get(low)[d] <= 0 || PKPTravelTimeTable.get(low)[d + 1] <= 0) {
			return Double.POSITIVE_INFINITY;
		}

		double r = angle % 1.0;
		return (1 - r) * valLow + r * valHigh;
	}

	/**
	 * 
	 * @param depth depth in km
	 * @param angle angle
	 * @return P wave travel time in seconds
	 */
	public static double getPWaveTravelTime(double depth, double angle) {
		depth = Math.max(0, Math.min(DEPTHS[DEPTHS.length - 1], depth));
		int d = 0;
		double q = 0;
		for (int i = 0; i < DEPTHS.length - 1; i++) {
			if (DEPTHS[i + 1] >= depth) {
				d = i;
				double max = DEPTHS[i + 1];
				double min = DEPTHS[i];
				q = (depth - min) / (max - min);
				break;
			}
		}

		if (angle <= 0) {
			return PTravelTimeTable.get(0)[d] * (1 - q) + PTravelTimeTable.get(0)[d + 1] * (q);
		} else if (angle >= PTravelTimeTable.size() - 1) {
			return PTravelTimeTable.get(PTravelTimeTable.size() - 1)[d] * (1 - q)
					+ PTravelTimeTable.get(PTravelTimeTable.size() - 1)[d + 1] * (q);
		}

		int low = (int) (angle);
		int high = low + 1;

		double valHigh = PTravelTimeTable.get(high)[d] * (1 - q) + PTravelTimeTable.get(high)[d + 1] * (q);
		double valLow = PTravelTimeTable.get(low)[d] * (1 - q) + PTravelTimeTable.get(low)[d + 1] * (q);

		double r = angle % 1.0;
		return (1 - r) * valLow + r * valHigh;
	}

	public static double getSWaveTravelTime(double depth, double angle) {
		depth = Math.max(0, Math.min(DEPTHS[DEPTHS.length - 1], depth));
		int d = 0;
		double q = 0;
		for (int i = 0; i < DEPTHS.length - 1; i++) {
			if (DEPTHS[i + 1] >= depth) {
				d = i;
				double max = DEPTHS[i + 1];
				double min = DEPTHS[i];
				q = (depth - min) / (max - min);
				break;
			}
		}
		if (angle <= 0) {
			return STravelTimeTable.get(0)[d] * (1 - q) + STravelTimeTable.get(0)[d + 1] * (q);
		} else if (angle >= STravelTimeTable.size() - 1) {
			return STravelTimeTable.get(STravelTimeTable.size() - 1)[d] * (1 - q)
					+ STravelTimeTable.get(STravelTimeTable.size() - 1)[d + 1] * (q);
		}
		int low = (int) (angle);
		int high = low + 1;

		double valHigh = STravelTimeTable.get(high)[d] * (1 - q) + STravelTimeTable.get(high)[d + 1] * (q);
		double valLow = STravelTimeTable.get(low)[d] * (1 - q) + STravelTimeTable.get(low)[d + 1] * (q);

		double r = angle % 1.0;
		return (1 - r) * valLow + r * valHigh;
	}

	/**
	 * -1 WHEN IT HASN'T OCCURRED YET +INFINITY WHEN IT ALREADY PASSED THE EARTH
	 **/

	@SuppressWarnings("unused")
	public static double getPKPWaveTravelAngle(double depth, double ageSec) {
		depth = Math.max(0, Math.min(DEPTHS_PKP[DEPTHS_PKP.length - 1], depth));
		int d = 0;
		double q = 0;
		for (int i = 0; i < DEPTHS_PKP.length - 1; i++) {
			if (DEPTHS_PKP[i + 1] >= depth) {
				d = i;
				double max = DEPTHS_PKP[i + 1];
				double min = DEPTHS_PKP[i];
				q = (depth - min) / (max - min);
				break;
			}
		}

		// System.out.println("lower: " + DEPTHS[d] + ", upper: " + DEPTHS[d + 1] + ", "
		// + q);

		// System.out.println("val0=" + val0+", "+d+", "+q);
		// its still underground

		double valN = PKPTravelTimeTable.get(PKPTravelTimeTable.size() - 1)[d] * (1 - q)
				+ PKPTravelTimeTable.get(PKPTravelTimeTable.size() - 1)[d + 1] * (q);
		// System.out.println("valN=" + valN);
		// exceeded 125°
		if (ageSec > valN) {
			return Double.POSITIVE_INFINITY;
		}

		int lo = 0;
		int hi = PKPTravelTimeTable.size() - 1;

		while (lo <= hi) {
			int mid = (hi + lo) / 2;
			double val = PKPTravelTimeTable.get(mid)[d] * (1 - q) + PKPTravelTimeTable.get(mid)[d + 1] * (q);
			if (ageSec < val) {
				hi = mid - 1;
			} else if (ageSec >= val) {
				lo = mid + 1;
			}
		}

		double valLo = PKPTravelTimeTable.get(lo)[d] * (1 - q) + PKPTravelTimeTable.get(lo)[d + 1] * (q);
		double valHi = PKPTravelTimeTable.get(hi)[d] * (1 - q) + PKPTravelTimeTable.get(hi)[d + 1] * (q);
		if (PKPTravelTimeTable.get(hi)[d] <= 0 || PKPTravelTimeTable.get(hi)[d + 1] <= 0
				|| PKPTravelTimeTable.get(lo)[d] <= 0 || PKPTravelTimeTable.get(lo)[d + 1] <= 0) {
			return Double.POSITIVE_INFINITY;
		}
		double r = (ageSec - valHi) / (valLo - valHi);
        return hi + r + PKP_START;
	}

	public static double getPWaveTravelAngle(double depth, double ageSec, boolean outOfBounds) {
		depth = Math.max(0, Math.min(DEPTHS[DEPTHS.length - 1], depth));
		int d = 0;
		double q = 0;
		for (int i = 0; i < DEPTHS.length - 1; i++) {
			if (DEPTHS[i + 1] >= depth) {
				d = i;
				double max = DEPTHS[i + 1];
				double min = DEPTHS[i];
				q = (depth - min) / (max - min);
				break;
			}
		}

        double val0 = PTravelTimeTable.get(0)[d] * (1 - q) + PTravelTimeTable.get(0)[d + 1] * (q);
		// System.out.println("val0=" + val0+", "+d+", "+q);
		// its still underground
		if (ageSec <= val0) {
			return outOfBounds ? -1 : 0.0;
		}

		double valN = PTravelTimeTable.get(PTravelTimeTable.size() - 1)[d] * (1 - q)
				+ PTravelTimeTable.get(PTravelTimeTable.size() - 1)[d + 1] * (q);
		// System.out.println("valN=" + valN);
		// exceeded 125°
		if (ageSec > valN) {
			return outOfBounds ? -1 : PTravelTimeTable.size() - 1;
		}

		int lo = 0;
		int hi = PTravelTimeTable.size() - 1;

		while (lo <= hi) {
			int mid = (hi + lo) / 2;
			double val = PTravelTimeTable.get(mid)[d] * (1 - q) + PTravelTimeTable.get(mid)[d + 1] * (q);
			if (ageSec < val) {
				hi = mid - 1;
			} else if (ageSec >= val) {
				lo = mid + 1;
			}
		}

		double valLo = PTravelTimeTable.get(lo)[d] * (1 - q) + PTravelTimeTable.get(lo)[d + 1] * (q);
		double valHi = PTravelTimeTable.get(hi)[d] * (1 - q) + PTravelTimeTable.get(hi)[d + 1] * (q);
		double r = (ageSec - valHi) / (valLo - valHi);
		return hi + r;
	}

	public static double getSWaveTravelAngle(double depth, double ageSec, boolean outOfBounds) {
		depth = Math.max(0, Math.min(DEPTHS[DEPTHS.length - 1], depth));
		int d = 0;
		double q = 0;
		for (int i = 0; i < DEPTHS.length - 1; i++) {
			if (DEPTHS[i + 1] >= depth) {
				d = i;
				double max = DEPTHS[i + 1];
				double min = DEPTHS[i];
				q = (depth - min) / (max - min);
				break;
			}
		}

		double val0 = STravelTimeTable.get(0)[d] * (1 - q) + STravelTimeTable.get(0)[d + 1] * (q);
		// It's still underground
		if (ageSec <= val0) {
			return outOfBounds ? -1 : 0.0;
		}

		double valN = STravelTimeTable.get(STravelTimeTable.size() - 1)[d] * (1 - q)
				+ STravelTimeTable.get(STravelTimeTable.size() - 1)[d + 1] * (q);
		if (ageSec > valN) {
			return outOfBounds ? -1 : PTravelTimeTable.size() - 1;
		}

		int lo = 0;
		int hi = STravelTimeTable.size() - 1;

		while (lo <= hi) {
			int mid = (hi + lo) / 2;
			double val = STravelTimeTable.get(mid)[d] * (1 - q) + STravelTimeTable.get(mid)[d + 1] * (q);
			if (ageSec < val) {
				hi = mid - 1;
			} else if (ageSec >= val) {
				lo = mid + 1;
			}
		}

		double valLo = STravelTimeTable.get(lo)[d] * (1 - q) + STravelTimeTable.get(lo)[d + 1] * (q);
		double valHi = STravelTimeTable.get(hi)[d] * (1 - q) + STravelTimeTable.get(hi)[d + 1] * (q);
		double r = (ageSec - valHi) / (valLo - valHi);
		return hi + r;
	}

	@SuppressWarnings("unused")
	public static double getEpicenterDistance(double depth, double deltaT) {
		double max = 20000;
		int runs = 20;
		double current = 0;

		double min = getSWaveTravelTime(depth, 0) - getPWaveTravelTime(depth, 0);
		if (deltaT < min) {
			return -1;
		}

		for (int i = 0; i < runs; i++) {
			double v = current + (max / Math.pow(2, i + 1)); // distance
			double dt = Math.abs(getSWaveTravelTime(depth, TauPTravelTimeCalculator.toAngle(v)) - getPWaveTravelTime(depth, TauPTravelTimeCalculator.toAngle(v)));
			if (dt < deltaT) {
				current += (max / Math.pow(2, i + 1));
			}
		}
		return current;
	}

}
